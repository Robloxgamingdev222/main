-- Gui to Lua
-- Version: 3.2

-- Instances:

local ScreenGui = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local UICorner = Instance.new("UICorner")
local TextLabel = Instance.new("TextLabel")
local TextLabel_2 = Instance.new("TextLabel")

--Properties:

ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(63, 63, 63)
Frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
Frame.BorderSizePixel = 0
Frame.Position = UDim2.new(0.288904905, 0, 0.230179027, 0)
Frame.Size = UDim2.new(0, 572, 0, 332)

UICorner.Parent = Frame

TextLabel.Parent = Frame
TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.BackgroundTransparency = 1.000
TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextLabel.BorderSizePixel = 0
TextLabel.Position = UDim2.new(0.305944055, 0, 0.280120492, 0)
TextLabel.Size = UDim2.new(0, 200, 0, 50)
TextLabel.Font = Enum.Font.FredokaOne
TextLabel.Text = "Loading"
TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.TextSize = 45.000

TextLabel_2.Parent = Frame
TextLabel_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_2.BackgroundTransparency = 1.000
TextLabel_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextLabel_2.BorderSizePixel = 0
TextLabel_2.Position = UDim2.new(0.13636364, 0, 0.662650585, 0)
TextLabel_2.Size = UDim2.new(0, 200, 0, 50)
TextLabel_2.Font = Enum.Font.FredokaOne
TextLabel_2.Text = "Cert:"
TextLabel_2.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_2.TextSize = 26.000

-- Scripts:

local function YZJSFJW_fake_script() -- TextLabel_2.LocalScript 
	local script = Instance.new('LocalScript', TextLabel_2)

	local HttpService = game:GetService("HttpService")
	local TextLabel = script.Parent -- Ensure this script is inside a TextLabel
	
	local GITHUB_RAW_URL = "https://raw.githubusercontent.com/Robloxgamingdev222/main/refs/heads/main/cert"
	
	local function fetchCertificate()
		print("Fetching certificate from:", GITHUB_RAW_URL) -- Debugging
		local success, response = pcall(function()
			return HttpService:GetAsync(GITHUB_RAW_URL)
		end)
	
		if success then
			print("Fetched data:", response) -- Debugging
			return response
		else
			warn("Failed to fetch certificate data:", response)
			return nil
		end
	end
	
	local function updateTextLabel()
		local certData = fetchCertificate()
	
		if certData then
			print("Cert Data:", certData) -- Debugging
			local certName, certStatus = certData:match("(%S+) CERT (%S+)") -- Extract name and status
	
			if certName and certStatus then
				if certStatus == "AUTHORIZED" then
					TextLabel.Text = "Cert: " .. certName .. " - Authorized ✅ Trusted"
				elseif certStatus == "UNKNOWN" then
					TextLabel.Text = "Cert: " .. certName .. " - Unknown ⚠️ Could be a bad code"
				elseif certStatus == "REVOKED" then
					TextLabel.Text = "Cert Down ❌ Please try again later"
				else
					TextLabel.Text = "Invalid Cert Data"
				end
			else
				TextLabel.Text = "Error reading cert data"
			end
		else
			TextLabel.Text = "Failed to fetch cert data"
		end
	end
	
	updateTextLabel()
	
end
coroutine.wrap(YZJSFJW_fake_script)()
